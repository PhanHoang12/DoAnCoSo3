package com.example.medicalappointment.Bacsi.Presentation

import android.widget.Toast
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Check
import androidx.compose.material.icons.filled.Close
import androidx.compose.material3.Button
import androidx.compose.material3.Card
import androidx.compose.material3.Text
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavHostController
import com.example.medicalappointment.BenhNhan.Presentation.booking.BookingViewModel
import com.google.firebase.auth.FirebaseAuth

@Composable
fun DoctorScreen(
    navController: NavHostController,
    doctorId: String,
    viewModel: BookingViewModel = viewModel()
) {
    val bookings by viewModel.bookingList
    val context = LocalContext.current

    // Load d·ªØ li·ªáu khi v√†o m√†n h√¨nh
    LaunchedEffect(Unit) {
        viewModel.loadBookings(doctorId)
    }

    Column(modifier = Modifier.fillMaxSize()) {
        DoctorTopBar(doctorId = doctorId, onMessageClick = {
            // TODO: m·ªü m√†n h√¨nh chat
        },
        onProfileClick = {
            navController.navigate("doctorProfile/$doctorId")
        })
        LazyColumn(modifier = Modifier
            .padding(16.dp)
            .weight(1f)  // Fill the available space
        ) {
            // S·∫Øp x·∫øp theo ng√†y + gi·ªù (ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu c·ªßa ng√†y v√† gi·ªù tr∆∞·ªõc khi s·∫Øp x·∫øp)
            val sortedBookings = bookings.sortedWith(
                compareBy({ it.ngayKham }, { it.gioKham })
            )

            items(sortedBookings) { booking ->
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 8.dp),
                    colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface),
                    elevation = CardDefaults.cardElevation(4.dp)
                ) {
                    Column(modifier = Modifier.padding(16.dp)) {
                        Text(text = "üë§ B·ªánh nh√¢n: ${booking.hoTen}")
                        Text(text = "üìÖ Ng√†y kh√°m: ${booking.ngayKham}")
                        Text(text = "‚è∞ Gi·ªù kh√°m: ${booking.gioKham}")
                        Text(text = "üìû SƒêT: ${booking.soDienThoai}")
                        Text(text = "üìå Tr·∫°ng th√°i: ${booking.trangThai}")

                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(top = 12.dp),
                            horizontalArrangement = Arrangement.SpaceBetween
                        ) {
                            // X√°c nh·∫≠n l·ªãch h·∫πn
                            IconButton(onClick = {
                                viewModel.confirmBooking(booking.BookingID,
                                    onSuccess = {
                                        Toast.makeText(context, "ƒê√£ x√°c nh·∫≠n l·ªãch h·∫πn!", Toast.LENGTH_SHORT).show()
                                    },
                                    onFailure = { errorMsg ->
                                        Toast.makeText(context, errorMsg, Toast.LENGTH_SHORT).show()
                                    }
                                )
                            }) {
                                Icon(
                                    imageVector = Icons.Default.Check,
                                    contentDescription = "X√°c nh·∫≠n",
                                    tint = MaterialTheme.colorScheme.primary
                                )
                            }

                            IconButton(onClick = {
                                viewModel.rejectBooking(booking.BookingID,
                                    onSuccess = {
                                        Toast.makeText(context, "ƒê√£ t·ª´ ch·ªëi l·ªãch h·∫πn", Toast.LENGTH_SHORT).show()
                                    },
                                    onFailure = { errorMsg ->
                                        Toast.makeText(context, errorMsg, Toast.LENGTH_SHORT).show()
                                    }
                                )
                            }) {
                                Icon(
                                    imageVector = Icons.Default.Close,
                                    contentDescription = "T·ª´ ch·ªëi",
                                    tint = Color.Red
                                )
                            }
                        }
                    }
                }
            }
        }

        Spacer(modifier = Modifier.weight(0.1f)) // Empty space to push button to bottom

        Button(
            onClick = {
                FirebaseAuth.getInstance().signOut()
                navController.navigate("signin") {
                    popUpTo("homeDoctor/{doctorId}") { inclusive = true }
                    Toast.makeText(context, "ƒêƒÉng xu·∫•t th√†nh c√¥ng!", Toast.LENGTH_SHORT).show()
                }
            },
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp) // ƒêi·ªÅu ch·ªânh kho·∫£ng c√°ch cho n√∫t
                .height(56.dp),  // ƒêi·ªÅu ch·ªânh chi·ªÅu cao ƒë·ªÉ n√∫t n·ªïi b·∫≠t h∆°n
        ) {
            Text("ƒêƒÉng xu·∫•t", style = MaterialTheme.typography.titleMedium) // S·ª≠ d·ª•ng body1 ho·∫∑c ki·ªÉu ch·ªØ th√≠ch h·ª£p kh√°c
        }

    }
}
