package com.example.medicalapp.Admin.Presentation.Hospitals

import android.net.Uri
import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.medicalapp.Admin.Data.Model.Hospital
import com.example.medicalappointment.Admin.Data.Repository.HospitalRepository
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class HospitalViewModel(private val repository : HospitalRepository) : ViewModel() {



    private val _hospitals = MutableStateFlow<List<Hospital>>(emptyList())
    val hospitals: StateFlow<List<Hospital>> get() = _hospitals

    private val _message = MutableStateFlow<String?>(null)
    val message: StateFlow<String?> get() = _message

    private val _selectedHospital = MutableStateFlow<Hospital?>(null)
    val selectedHospital: StateFlow<Hospital?> get() = _selectedHospital

    init {
        fetchHospitals()
    }

    fun fetchHospitalById(hospitalId: String) {
        viewModelScope.launch {
            try {
                _selectedHospital.value = repository.getHospitalById(hospitalId)
            } catch (e: Exception) {
                Log.e("HospitalViewModel", "Error fetching hospital: ${e.message}")
            }
        }
    }

    fun fetchHospitals() {
        viewModelScope.launch {
            try {
                Log.d("HospitalViewModel", "üì• B·∫Øt ƒë·∫ßu t·∫£i danh s√°ch b·ªánh vi·ªán...")
                _hospitals.value = repository.getAllHospitals()
                Log.d(
                    "HospitalViewModel",
                    "üì• L·∫•y danh s√°ch b·ªánh vi·ªán th√†nh c√¥ng! T·ªïng s·ªë: ${_hospitals.value.size}"
                )
            } catch (e: Exception) {
                _message.value = "‚ùå L·ªói khi t·∫£i danh s√°ch b·ªánh vi·ªán!"
                Log.e("HospitalViewModel", "‚ö†Ô∏è L·ªói khi t·∫£i danh s√°ch b·ªánh vi·ªán: ${e.message}", e)
            }
        }
    }

    fun saveHospital(hospital: Hospital) {
        viewModelScope.launch {
            try {
                Log.d("HospitalViewModel", "üì§ B·∫Øt ƒë·∫ßu l∆∞u b·ªánh vi·ªán: ${hospital.tenBV}")
                val success = repository.addHospital(hospital)
                if (success) {
                    _message.value = "üè• B·ªánh vi·ªán ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!"
                    Log.d("HospitalViewModel", "üì§ L∆∞u b·ªánh vi·ªán th√†nh c√¥ng: ${hospital.tenBV}")
                    fetchHospitals() // Refresh danh s√°ch b·ªánh vi·ªán
                } else {
                    _message.value = "‚ùå B·ªánh vi·ªán ƒë√£ t·ªìn t·∫°i ho·∫∑c l·ªói khi l∆∞u!"
                    Log.d("HospitalViewModel", "‚ùå Kh√¥ng th·ªÉ l∆∞u b·ªánh vi·ªán, c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i.")
                }
            } catch (e: Exception) {
                _message.value = "‚ùå L·ªói khi l∆∞u b·ªánh vi·ªán: ${e.message}"
                Log.e("HospitalViewModel", "‚ùå L·ªói khi l∆∞u b·ªánh vi·ªán", e)
            }
        }
    }

    suspend fun uploadImage(imageUri: Uri, hospitalId: String): String? {
        return try {
            Log.d("HospitalViewModel", "üì∏ B·∫Øt ƒë·∫ßu upload ·∫£nh cho b·ªánh vi·ªán v·ªõi ID: $hospitalId")
            val url = repository.uploadImage(hospitalId, imageUri)
            Log.d("HospitalViewModel", "üì∏ Upload ·∫£nh th√†nh c√¥ng! URL: $url")
            url
        } catch (e: Exception) {
            Log.e("HospitalViewModel", "‚ùå L·ªói khi upload ·∫£nh cho b·ªánh vi·ªán ID: $hospitalId", e)
            null
        }
    }

    fun updateHospital(hospital: Hospital, newImageUri: Uri? = null) {
        viewModelScope.launch {
            try {
                Log.d("HospitalViewModel", "‚úèÔ∏è B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t b·ªánh vi·ªán: ${hospital.tenBV}")
                val imageUrl = newImageUri?.let {
                    // Ch·ªù k·∫øt qu·∫£ t·ª´ h√†m suspend uploadImage
                    uploadImage(it, hospital.id)
                } ?: hospital.anh
                val updatedHospital = hospital.copy(anh = imageUrl ?: hospital.anh)
                val success = repository.updateHospital(updatedHospital)
                if (success) {
                    _message.value = "‚úèÔ∏è B·ªánh vi·ªán ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!"
                    Log.d("HospitalViewModel", "‚úèÔ∏è C·∫≠p nh·∫≠t b·ªánh vi·ªán th√†nh c√¥ng: ${hospital.tenBV}")
                    fetchHospitals()
                } else {
                    _message.value = "‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t b·ªánh vi·ªán!"
                    Log.d("HospitalViewModel", "‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t b·ªánh vi·ªán: ${hospital.tenBV}")
                }
            } catch (e: Exception) {
                _message.value = "‚ùå L·ªói khi c·∫≠p nh·∫≠t b·ªánh vi·ªán: ${e.message}"
                Log.e("HospitalViewModel", "‚ùå L·ªói khi c·∫≠p nh·∫≠t b·ªánh vi·ªán", e)
            }
        }
    }



    fun deleteHospital(hospital: Hospital) {
        viewModelScope.launch {
            try {
                Log.d("HospitalViewModel", "üóëÔ∏è B·∫Øt ƒë·∫ßu x√≥a b·ªánh vi·ªán: ${hospital.tenBV}")
                val success = repository.deleteHospital(hospital.id)
                if (success) {
                    _message.value = "üóëÔ∏è B·ªánh vi·ªán ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!"
                    Log.d("HospitalViewModel", "üóëÔ∏è X√≥a b·ªánh vi·ªán th√†nh c√¥ng: ${hospital.tenBV}")
                    fetchHospitals() // Refresh danh s√°ch b·ªánh vi·ªán
                } else {
                    _message.value = "‚ùå Kh√¥ng th·ªÉ x√≥a b·ªánh vi·ªán!"
                    Log.d("HospitalViewModel", "‚ùå Kh√¥ng th·ªÉ x√≥a b·ªánh vi·ªán: ${hospital.tenBV}")
                }
            } catch (e: Exception) {
                _message.value = "‚ùå L·ªói khi x√≥a b·ªánh vi·ªán: ${e.message}"
                Log.e("HospitalViewModel", "‚ùå L·ªói khi x√≥a b·ªánh vi·ªán", e)
            }

        }
    }


}
